//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship Association
	/// Associations between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(AssociationTypeDescriptionProvider))]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("ce77f831-a92d-4274-823a-3a8441a65f3a")]
	public abstract partial class Association : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Association domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xce77f831, 0xa92d, 0x4274, 0x82, 0x3a, 0x3a, 0x84, 0x41, 0xa6, 0x5f, 0x3a);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected Association(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xd2edf927, 0x64c2, 0x4fe3, 0x8d, 0x4e, 0xc4, 0x4e, 0x87, 0x14, 0x2c, 0x4c);
		
		/// <summary>
		/// DomainRole Source
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/Source.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/Source.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.Association/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d2edf927-64c2-4fe3-8d4e-c44e87142c4c")]
		public abstract ModelClass Source
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Sources of a ModelClass
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetSources(ModelClass element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ModelClass>, ModelClass>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x1a39c29f, 0x8df6, 0x4063, 0xbf, 0x60, 0xcf, 0xe2, 0xc0, 0xc6, 0x19, 0xfa);
		
		/// <summary>
		/// DomainRole Target
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/Target.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/Target.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.Association/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1a39c29f-8df6-4063-bf60-cfe2c0c619fa")]
		public abstract ModelClass Target
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Targets of a ModelClass
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetTargets(ModelClass element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ModelClass>, ModelClass>(element, SourceDomainRoleId);
		}
		#endregion
		#region SourceMultiplicity domain property code
		
		/// <summary>
		/// SourceMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceMultiplicityDomainPropertyId = new global::System.Guid(0x50d076b7, 0x4a3e, 0x4b87, 0xb5, 0xbb, 0x85, 0x37, 0x52, 0x0a, 0xdc, 0x72);
		
		/// <summary>
		/// Storage for SourceMultiplicity
		/// </summary>
		private Multiplicity sourceMultiplicityPropertyStorage = Multiplicity.One;
		
		/// <summary>
		/// Gets or sets the value of SourceMultiplicity domain property.
		/// The allowed number of entities at this end of the association
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(SourceMultiplicityTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicity.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicity.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicity.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.One)]
		[DslModeling::DomainObjectId("50d076b7-4a3e-4b87-b5bb-8537520adc72")]
		public Multiplicity SourceMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceMultiplicity domain property.
		/// </summary>
		internal sealed partial class SourceMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private SourceMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceMultiplicity domain property value handler.
			/// </summary>
			public static readonly SourceMultiplicityPropertyHandler Instance = new SourceMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetMultiplicity domain property code
		
		/// <summary>
		/// TargetMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetMultiplicityDomainPropertyId = new global::System.Guid(0xb84f185b, 0x4eea, 0x4454, 0xa4, 0x7d, 0x26, 0xb1, 0xa4, 0xb0, 0x95, 0x23);
		
		/// <summary>
		/// Storage for TargetMultiplicity
		/// </summary>
		private Multiplicity targetMultiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of TargetMultiplicity domain property.
		/// The allowed number of entities at this end of the association
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(TargetMultiplicityTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicity.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicity.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicity.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b84f185b-4eea-4454-a47d-26b1a4b09523")]
		public Multiplicity TargetMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetMultiplicity domain property.
		/// </summary>
		internal sealed partial class TargetMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private TargetMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetMultiplicity domain property value handler.
			/// </summary>
			public static readonly TargetMultiplicityPropertyHandler Instance = new TargetMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetPropertyName domain property code
		
		/// <summary>
		/// TargetPropertyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetPropertyNameDomainPropertyId = new global::System.Guid(0x81625766, 0x4885, 0x46ba, 0xa5, 0x35, 0xc3, 0xe2, 0x3a, 0x7c, 0x5f, 0x88);
		
		/// <summary>
		/// Storage for TargetPropertyName
		/// </summary>
		private global::System.String targetPropertyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetPropertyName domain property.
		/// Name of the entity property that returns the value at this end
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetPropertyName.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetPropertyName.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetPropertyName.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("81625766-4885-46ba-a535-c3e23a7c5f88")]
		public global::System.String TargetPropertyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetPropertyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetPropertyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetPropertyName domain property.
		/// </summary>
		internal sealed partial class TargetPropertyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetPropertyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetPropertyName domain property value handler.
			/// </summary>
			public static readonly TargetPropertyNamePropertyHandler Instance = new TargetPropertyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetPropertyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetPropertyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetPropertyNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetPropertyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Persistent domain property code
		
		/// <summary>
		/// Persistent domain property Id.
		/// </summary>
		public static readonly global::System.Guid PersistentDomainPropertyId = new global::System.Guid(0x8c8b1118, 0xd3f2, 0x494a, 0xb1, 0x8e, 0x8d, 0xbe, 0x26, 0x21, 0x29, 0x10);
		
		/// <summary>
		/// Storage for Persistent
		/// </summary>
		private global::System.Boolean persistentPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Persistent domain property.
		/// If false, this is a transient association not stored in the database but instead
		/// created in code
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/Persistent.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/Persistent.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/Persistent.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("8c8b1118-d3f2-494a-b18e-8dbe26212910")]
		public global::System.Boolean Persistent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return persistentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PersistentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.Persistent domain property.
		/// </summary>
		internal sealed partial class PersistentPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.Boolean>
		{
			private PersistentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.Persistent domain property value handler.
			/// </summary>
			public static readonly PersistentPropertyHandler Instance = new PersistentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.Persistent domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PersistentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.persistentPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.persistentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceMultiplicityDisplay domain property code
		
		/// <summary>
		/// SourceMultiplicityDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceMultiplicityDisplayDomainPropertyId = new global::System.Guid(0x0346043b, 0x1ed8, 0x4299, 0xb8, 0x4a, 0x57, 0x16, 0x7b, 0x4c, 0x00, 0xdb);
		
		/// <summary>
		/// Gets or sets the value of SourceMultiplicityDisplay domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicityDisplay.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicityDisplay.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicityDisplay.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("0346043b-1ed8-4299-b84a-57167b4c00db")]
		public global::System.String SourceMultiplicityDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return SourceMultiplicityDisplayPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceMultiplicityDisplay domain property.
		/// </summary>
		internal sealed partial class SourceMultiplicityDisplayPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Association, global::System.String>
		{
			private SourceMultiplicityDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceMultiplicityDisplay domain property value handler.
			/// </summary>
			public static readonly SourceMultiplicityDisplayPropertyHandler Instance = new SourceMultiplicityDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceMultiplicityDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceMultiplicityDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for SourceMultiplicityDisplay because its Kind is
				// set to Calculated. Please provide the GetSourceMultiplicityDisplayValue()
				// method on the domain class.
				return element.GetSourceMultiplicityDisplayValue();
			}
		
		}
		
		#endregion
		#region TargetMultiplicityDisplay domain property code
		
		/// <summary>
		/// TargetMultiplicityDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetMultiplicityDisplayDomainPropertyId = new global::System.Guid(0x450de663, 0xcfb6, 0x48e3, 0x88, 0x8a, 0x4f, 0xbc, 0xee, 0x3a, 0xc7, 0x78);
		
		/// <summary>
		/// Gets or sets the value of TargetMultiplicityDisplay domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicityDisplay.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicityDisplay.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicityDisplay.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("450de663-cfb6-48e3-888a-4fbcee3ac778")]
		public global::System.String TargetMultiplicityDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TargetMultiplicityDisplayPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetMultiplicityDisplay domain property.
		/// </summary>
		internal sealed partial class TargetMultiplicityDisplayPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Association, global::System.String>
		{
			private TargetMultiplicityDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetMultiplicityDisplay domain property value handler.
			/// </summary>
			public static readonly TargetMultiplicityDisplayPropertyHandler Instance = new TargetMultiplicityDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetMultiplicityDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetMultiplicityDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TargetMultiplicityDisplay because its Kind is
				// set to Calculated. Please provide the GetTargetMultiplicityDisplayValue()
				// method on the domain class.
				return element.GetTargetMultiplicityDisplayValue();
			}
		
		}
		
		#endregion
		#region SourceDeleteAction domain property code
		
		/// <summary>
		/// SourceDeleteAction domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceDeleteActionDomainPropertyId = new global::System.Guid(0xf40a8fc6, 0x0b1b, 0x4c1b, 0xa4, 0x6c, 0x75, 0xd3, 0x45, 0x0c, 0xd6, 0xc8);
		
		/// <summary>
		/// Storage for SourceDeleteAction
		/// </summary>
		private DeleteAction sourceDeleteActionPropertyStorage = DeleteAction.Default;
		
		/// <summary>
		/// Gets or sets the value of SourceDeleteAction domain property.
		/// The action to take when an entity on this end is deleted.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/SourceDeleteAction.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/SourceDeleteAction.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/SourceDeleteAction.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DeleteAction.Default)]
		[DslModeling::DomainObjectId("f40a8fc6-0b1b-4c1b-a46c-75d3450cd6c8")]
		public DeleteAction SourceDeleteAction
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceDeleteActionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceDeleteActionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceDeleteAction domain property.
		/// </summary>
		internal sealed partial class SourceDeleteActionPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, DeleteAction>
		{
			private SourceDeleteActionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceDeleteAction domain property value handler.
			/// </summary>
			public static readonly SourceDeleteActionPropertyHandler Instance = new SourceDeleteActionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceDeleteAction domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceDeleteActionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DeleteAction GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceDeleteActionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, DeleteAction newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DeleteAction oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceDeleteActionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetDeleteAction domain property code
		
		/// <summary>
		/// TargetDeleteAction domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetDeleteActionDomainPropertyId = new global::System.Guid(0x6e502a47, 0x428b, 0x455f, 0xb1, 0x55, 0xed, 0xf3, 0x10, 0xce, 0x6c, 0x73);
		
		/// <summary>
		/// Storage for TargetDeleteAction
		/// </summary>
		private DeleteAction targetDeleteActionPropertyStorage = DeleteAction.Default;
		
		/// <summary>
		/// Gets or sets the value of TargetDeleteAction domain property.
		/// The action to take when an entity on this end is deleted.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetDeleteAction.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetDeleteAction.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetDeleteAction.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DeleteAction.Default)]
		[DslModeling::DomainObjectId("6e502a47-428b-455f-b155-edf310ce6c73")]
		public DeleteAction TargetDeleteAction
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetDeleteActionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetDeleteActionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetDeleteAction domain property.
		/// </summary>
		internal sealed partial class TargetDeleteActionPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, DeleteAction>
		{
			private TargetDeleteActionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetDeleteAction domain property value handler.
			/// </summary>
			public static readonly TargetDeleteActionPropertyHandler Instance = new TargetDeleteActionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetDeleteAction domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetDeleteActionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DeleteAction GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetDeleteActionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, DeleteAction newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DeleteAction oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetDeleteActionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CollectionClass domain property code
		
		/// <summary>
		/// CollectionClass domain property Id.
		/// </summary>
		public static readonly global::System.Guid CollectionClassDomainPropertyId = new global::System.Guid(0x59735c14, 0x84b9, 0x4b9c, 0xb4, 0x49, 0x22, 0x48, 0xcb, 0x67, 0xd6, 0x5a);
		
		/// <summary>
		/// Gets or sets the value of CollectionClass domain property.
		/// Class used to instanciate association properties. Implements ICollection<>
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(CollectionTypeTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/CollectionClass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/CollectionClass.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/CollectionClass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("59735c14-84b9-4b9c-b449-2248cb67d65a")]
		public global::System.String CollectionClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CollectionClassPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CollectionClassPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.CollectionClass domain property.
		/// </summary>
		internal sealed partial class CollectionClassPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private CollectionClassPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.CollectionClass domain property value handler.
			/// </summary>
			public static readonly CollectionClassPropertyHandler Instance = new CollectionClassPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.CollectionClass domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CollectionClassDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CollectionClass because its Kind is
				// set to CustomStorage. Please provide the GetCollectionClassValue()
				// method on the domain class.
				return element.GetCollectionClassValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for CollectionClass because its Kind is
					// set to CustomStorage. Please provide the SetCollectionClassValue()
					// method on the domain class.
					element.SetCollectionClassValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TargetDescription domain property code
		
		/// <summary>
		/// TargetDescription domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetDescriptionDomainPropertyId = new global::System.Guid(0x8983d9c4, 0xc5f3, 0x4eaa, 0xb8, 0xb2, 0x14, 0xd1, 0x8a, 0x85, 0x8f, 0x21);
		
		/// <summary>
		/// Storage for TargetDescription
		/// </summary>
		private global::System.String targetDescriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetDescription domain property.
		/// Detailed code documentation for this end of the association
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetDescription.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetDescription.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetDescription.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("8983d9c4-c5f3-4eaa-b8b2-14d18a858f21")]
		public global::System.String TargetDescription
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetDescriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetDescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetDescription domain property.
		/// </summary>
		internal sealed partial class TargetDescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetDescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetDescription domain property value handler.
			/// </summary>
			public static readonly TargetDescriptionPropertyHandler Instance = new TargetDescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetDescription domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetDescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetDescriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetDescriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetSummary domain property code
		
		/// <summary>
		/// TargetSummary domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetSummaryDomainPropertyId = new global::System.Guid(0xedec72cc, 0xc40b, 0x4c64, 0xb2, 0xd4, 0xe7, 0x13, 0xf6, 0x91, 0xec, 0xd0);
		
		/// <summary>
		/// Storage for TargetSummary
		/// </summary>
		private global::System.String targetSummaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetSummary domain property.
		/// Short code documentation for this end of the association
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetSummary.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetSummary.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetSummary.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("edec72cc-c40b-4c64-b2d4-e713f691ecd0")]
		public global::System.String TargetSummary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetSummaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetSummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetSummary domain property.
		/// </summary>
		internal sealed partial class TargetSummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetSummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetSummary domain property value handler.
			/// </summary>
			public static readonly TargetSummaryPropertyHandler Instance = new TargetSummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetSummary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetSummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetSummaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetSummaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x53747127, 0xcd19, 0x43e0, 0xb3, 0x7b, 0x1b, 0x66, 0x9d, 0x50, 0x6e, 0xd2);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Brief code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/Summary.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/Summary.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/Summary.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("53747127-cd19-43e0-b37b-1b669d506ed2")]
		public global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.summaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsCollectionClassTracking domain property code
		
		/// <summary>
		/// IsCollectionClassTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCollectionClassTrackingDomainPropertyId = new global::System.Guid(0xe73f6b6d, 0x22b1, 0x4dd7, 0x8d, 0x8d, 0x37, 0xb7, 0xf1, 0xca, 0xc4, 0xa0);
		
		/// <summary>
		/// Storage for IsCollectionClassTracking
		/// </summary>
		private global::System.Boolean isCollectionClassTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsCollectionClassTracking domain property.
		/// If true, Association.CollectionClass tracks ModelRoot.DefaultCollectionClass
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/IsCollectionClassTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/IsCollectionClassTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("e73f6b6d-22b1-4dd7-8d8d-37b7f1cac4a0")]
		public global::System.Boolean IsCollectionClassTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isCollectionClassTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsCollectionClassTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.IsCollectionClassTracking domain property.
		/// </summary>
		internal sealed partial class IsCollectionClassTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.Boolean>
		{
			private IsCollectionClassTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.IsCollectionClassTracking domain property value handler.
			/// </summary>
			public static readonly IsCollectionClassTrackingPropertyHandler Instance = new IsCollectionClassTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.IsCollectionClassTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsCollectionClassTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isCollectionClassTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isCollectionClassTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceRole domain property code
		
		/// <summary>
		/// SourceRole domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceRoleDomainPropertyId = new global::System.Guid(0x8f74b05b, 0x3bb2, 0x480b, 0x95, 0x13, 0x50, 0xef, 0xd9, 0x15, 0x88, 0xec);
		
		/// <summary>
		/// Storage for SourceRole
		/// </summary>
		private EndpointRole sourceRolePropertyStorage = EndpointRole.NotSet;
		
		/// <summary>
		/// Gets or sets the value of SourceRole domain property.
		/// Which object(s) in this association is/are the principal object(s)?
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/SourceRole.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/SourceRole.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/SourceRole.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(EndpointRole.NotSet)]
		[DslModeling::DomainObjectId("8f74b05b-3bb2-480b-9513-50efd91588ec")]
		public EndpointRole SourceRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceRolePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceRolePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceRole domain property.
		/// </summary>
		internal sealed partial class SourceRolePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, EndpointRole>
		{
			private SourceRolePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceRole domain property value handler.
			/// </summary>
			public static readonly SourceRolePropertyHandler Instance = new SourceRolePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceRole domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceRoleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EndpointRole GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceRolePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, EndpointRole newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EndpointRole oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceRolePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetRole domain property code
		
		/// <summary>
		/// TargetRole domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleDomainPropertyId = new global::System.Guid(0x2eb18350, 0x1736, 0x4c15, 0x84, 0xc4, 0x21, 0x91, 0x19, 0xa5, 0x6a, 0x2a);
		
		/// <summary>
		/// Storage for TargetRole
		/// </summary>
		private EndpointRole targetRolePropertyStorage = EndpointRole.NotSet;
		
		/// <summary>
		/// Gets or sets the value of TargetRole domain property.
		/// Which object(s) in this association is/are the dependent object(s)?
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetRole.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetRole.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetRole.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(EndpointRole.NotSet)]
		[DslModeling::DomainObjectId("2eb18350-1736-4c15-84c4-219119a56a2a")]
		public EndpointRole TargetRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetRolePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetRolePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetRole domain property.
		/// </summary>
		internal sealed partial class TargetRolePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, EndpointRole>
		{
			private TargetRolePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetRole domain property value handler.
			/// </summary>
			public static readonly TargetRolePropertyHandler Instance = new TargetRolePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetRole domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetRoleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EndpointRole GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetRolePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, EndpointRole newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EndpointRole oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetRolePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ForeignKeyLocation domain property code
		
		/// <summary>
		/// ForeignKeyLocation domain property Id.
		/// </summary>
		public static readonly global::System.Guid ForeignKeyLocationDomainPropertyId = new global::System.Guid(0xc0b9ec69, 0x21ba, 0x432e, 0xa8, 0xe9, 0x3a, 0xfa, 0x83, 0xf8, 0xb2, 0xb7);
		
		/// <summary>
		/// Storage for ForeignKeyLocation
		/// </summary>
		private ForeignKeyOwner foreignKeyLocationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ForeignKeyLocation domain property.
		/// Which class should hold the foreign key for this relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/ForeignKeyLocation.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/ForeignKeyLocation.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("c0b9ec69-21ba-432e-a8e9-3afa83f8b2b7")]
		public ForeignKeyOwner ForeignKeyLocation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return foreignKeyLocationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				ForeignKeyLocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.ForeignKeyLocation domain property.
		/// </summary>
		internal sealed partial class ForeignKeyLocationPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, ForeignKeyOwner>
		{
			private ForeignKeyLocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.ForeignKeyLocation domain property value handler.
			/// </summary>
			public static readonly ForeignKeyLocationPropertyHandler Instance = new ForeignKeyLocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.ForeignKeyLocation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ForeignKeyLocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ForeignKeyOwner GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.foreignKeyLocationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, ForeignKeyOwner newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ForeignKeyOwner oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.foreignKeyLocationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetCustomAttributes domain property code
		
		/// <summary>
		/// TargetCustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetCustomAttributesDomainPropertyId = new global::System.Guid(0xa667dd36, 0xac5c, 0x4c98, 0xb3, 0x68, 0xb8, 0x47, 0x78, 0xbd, 0xcd, 0x56);
		
		/// <summary>
		/// Storage for TargetCustomAttributes
		/// </summary>
		private global::System.String targetCustomAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetCustomAttributes domain property.
		/// Any custom attributes to be generated for the target property. Will be passed
		/// through as entered.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetCustomAttributes.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetCustomAttributes.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetCustomAttributes.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a667dd36-ac5c-4c98-b368-b84778bdcd56")]
		public global::System.String TargetCustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetCustomAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetCustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetCustomAttributes domain property.
		/// </summary>
		internal sealed partial class TargetCustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetCustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetCustomAttributes domain property value handler.
			/// </summary>
			public static readonly TargetCustomAttributesPropertyHandler Instance = new TargetCustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetCustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetCustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetCustomAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetCustomAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetDisplayText domain property code
		
		/// <summary>
		/// TargetDisplayText domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetDisplayTextDomainPropertyId = new global::System.Guid(0x4f71c60f, 0xe2d6, 0x475c, 0xb5, 0x45, 0x1a, 0xa1, 0x8d, 0x85, 0xd5, 0xab);
		
		/// <summary>
		/// Storage for TargetDisplayText
		/// </summary>
		private global::System.String targetDisplayTextPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetDisplayText domain property.
		/// Text for [Display(Name="<text>")] attribute on this end's property
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetDisplayText.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetDisplayText.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetDisplayText.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4f71c60f-e2d6-475c-b545-1aa18d85d5ab")]
		public global::System.String TargetDisplayText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetDisplayTextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetDisplayTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetDisplayText domain property.
		/// </summary>
		internal sealed partial class TargetDisplayTextPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetDisplayTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetDisplayText domain property value handler.
			/// </summary>
			public static readonly TargetDisplayTextPropertyHandler Instance = new TargetDisplayTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetDisplayText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetDisplayTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetDisplayTextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetDisplayTextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetForeignKey domain property code
		
		/// <summary>
		/// TargetForeignKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetForeignKeyDomainPropertyId = new global::System.Guid(0xb4ff6032, 0x80bb, 0x4e36, 0xb5, 0x69, 0x7e, 0x3d, 0x94, 0x1d, 0x32, 0x77);
		
		/// <summary>
		/// Storage for TargetForeignKey
		/// </summary>
		private global::System.String targetForeignKeyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetForeignKey domain property.
		/// Name of the foreign key column at this end
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/TargetForeignKey.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/TargetForeignKey.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/TargetForeignKey.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b4ff6032-80bb-4e36-b569-7e3d941d3277")]
		public global::System.String TargetForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetForeignKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetForeignKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetForeignKey domain property.
		/// </summary>
		internal sealed partial class TargetForeignKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetForeignKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetForeignKey domain property value handler.
			/// </summary>
			public static readonly TargetForeignKeyPropertyHandler Instance = new TargetForeignKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetForeignKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetForeignKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetForeignKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetForeignKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceForeignKey domain property code
		
		/// <summary>
		/// SourceForeignKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceForeignKeyDomainPropertyId = new global::System.Guid(0x48367f10, 0xc35e, 0x4151, 0xab, 0xea, 0x1a, 0x2b, 0xf0, 0x0c, 0x9f, 0x98);
		
		/// <summary>
		/// Storage for SourceForeignKey
		/// </summary>
		private global::System.String sourceForeignKeyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceForeignKey domain property.
		/// Name of the foreign key column at this end
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/SourceForeignKey.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/SourceForeignKey.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/SourceForeignKey.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("48367f10-c35e-4151-abea-1a2bf00c9f98")]
		public global::System.String SourceForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceForeignKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceForeignKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceForeignKey domain property.
		/// </summary>
		internal sealed partial class SourceForeignKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private SourceForeignKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceForeignKey domain property value handler.
			/// </summary>
			public static readonly SourceForeignKeyPropertyHandler Instance = new SourceForeignKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceForeignKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceForeignKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceForeignKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceForeignKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GenerateClient domain property code
		
		/// <summary>
		/// GenerateClient domain property Id.
		/// </summary>
		public static readonly global::System.Guid GenerateClientDomainPropertyId = new global::System.Guid(0xe08f6f24, 0x0792, 0x496b, 0x88, 0xc0, 0x0d, 0x58, 0xf5, 0x3c, 0x8c, 0xf1);
		
		/// <summary>
		/// Storage for GenerateClient
		/// </summary>
		private global::System.Boolean generateClientPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GenerateClient domain property.
		/// Description for Sawczyn.EFDesigner.EFModel.Association.Generate Client Model
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Association/GenerateClient.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.Association/GenerateClient.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Association/GenerateClient.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e08f6f24-0792-496b-88c0-0d58f53c8cf1")]
		public global::System.Boolean GenerateClient
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generateClientPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GenerateClientPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.GenerateClient domain property.
		/// </summary>
		internal sealed partial class GenerateClientPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.Boolean>
		{
			private GenerateClientPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.GenerateClient domain property value handler.
			/// </summary>
			public static readonly GenerateClientPropertyHandler Instance = new GenerateClientPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.GenerateClient domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GenerateClientDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.generateClientPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generateClientPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.Association> GetLinksToTargets ( global::Sawczyn.EFDesigner.EFModel.ModelClass sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.Association>(sourceInstance, global::Sawczyn.EFDesigner.EFModel.Association.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.Association> GetLinksToSources ( global::Sawczyn.EFDesigner.EFModel.ModelClass targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.Association>(targetInstance, global::Sawczyn.EFDesigner.EFModel.Association.TargetDomainRoleId);
		}
		#endregion
		#region Association instance accessors
		
		/// <summary>
		/// Get any Association links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.Association> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelClass source, global::Sawczyn.EFDesigner.EFModel.ModelClass target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.Association> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.Association>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.Association> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.Association>(source, global::Sawczyn.EFDesigner.EFModel.Association.SourceDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.Association link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship UnidirectionalAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("71aa98ea-ecd0-4096-b185-5c63efa364eb")]
	public partial class UnidirectionalAssociation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UnidirectionalAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71aa98ea, 0xecd0, 0x4096, 0xb1, 0x85, 0x5c, 0x63, 0xef, 0xa3, 0x64, 0xeb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UnidirectionalAssociation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public UnidirectionalAssociation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UnidirectionalAssociation.UnidirectionalSourceDomainRoleId, source), new DslModeling::RoleAssignment(UnidirectionalAssociation.UnidirectionalTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnidirectionalAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnidirectionalAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnidirectionalAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnidirectionalAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UnidirectionalSource domain role code
		
		/// <summary>
		/// UnidirectionalSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnidirectionalSourceDomainRoleId = new global::System.Guid(0x2ece6e4a, 0x4505, 0x4e70, 0x8f, 0x12, 0x59, 0x52, 0x5a, 0xca, 0xe9, 0x45);
		
		/// <summary>
		/// DomainRole UnidirectionalSource
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalSource.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalSource.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UnidirectionalTargets", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalSource.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2ece6e4a-4505-4e70-8f12-59525acae945")]
		public virtual ModelClass UnidirectionalSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnidirectionalSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnidirectionalSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnidirectionalSources of a ModelClass
		/// <summary>
		/// Gets a list of UnidirectionalSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetUnidirectionalSources(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, UnidirectionalTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing UnidirectionalSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.UnidirectionalSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.UnidirectionalSource = value;
			}
		}
		
		#endregion
		#region UnidirectionalTarget domain role code
		
		/// <summary>
		/// UnidirectionalTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnidirectionalTargetDomainRoleId = new global::System.Guid(0x0cd8b649, 0x09aa, 0x4c6b, 0x9e, 0x7a, 0x95, 0x08, 0x8c, 0x24, 0x6e, 0x5f);
		
		/// <summary>
		/// DomainRole UnidirectionalTarget
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalTarget.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalTarget.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UnidirectionalSources", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalTarget.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0cd8b649-09aa-4c6b-9e7a-95088c246e5f")]
		public virtual ModelClass UnidirectionalTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnidirectionalTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnidirectionalTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnidirectionalTargets of a ModelClass
		/// <summary>
		/// Gets a list of UnidirectionalTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetUnidirectionalTargets(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, UnidirectionalSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing UnidirectionalTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.UnidirectionalTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.UnidirectionalTarget = value;
			}
		}
		
		#endregion
		#region UnidirectionalSource link accessor
		/// <summary>
		/// Get the list of UnidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation> GetLinksToUnidirectionalTargets ( global::Sawczyn.EFDesigner.EFModel.ModelClass unidirectionalSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation>(unidirectionalSourceInstance, global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
		}
		#endregion
		#region UnidirectionalTarget link accessor
		/// <summary>
		/// Get the list of UnidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation> GetLinksToUnidirectionalSources ( global::Sawczyn.EFDesigner.EFModel.ModelClass unidirectionalTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation>(unidirectionalTargetInstance, global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.UnidirectionalTargetDomainRoleId);
		}
		#endregion
		#region UnidirectionalAssociation instance accessors
		
		/// <summary>
		/// Get any UnidirectionalAssociation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelClass source, global::Sawczyn.EFDesigner.EFModel.ModelClass target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation>(source, global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation link in links )
			{
				if ( target.Equals(link.UnidirectionalTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship ClassHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassHasAttributes.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassHasAttributes.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("75261e55-91dc-47d5-aa17-0eceb29660b5")]
	public partial class ClassHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x75261e55, 0x91dc, 0x47d5, 0xaa, 0x17, 0x0e, 0xce, 0xb2, 0x96, 0x60, 0xb5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasAttributes link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelAttribute to use as the target of the relationship.</param>
		public ClassHasAttributes(ModelClass source, ModelAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasAttributes.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x97fe55a1, 0x616b, 0x4c9e, 0x89, 0xbe, 0x2a, 0x8e, 0x41, 0xe8, 0xeb, 0xaa);
		
		/// <summary>
		/// DomainRole ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassHasAttributes/ModelClass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassHasAttributes/ModelClass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ClassHasAttributes/ModelClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("97fe55a1-616b-4c9e-89be-2a8e41e8ebaa")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a ModelAttribute
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(ModelAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(ModelAttribute element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newModelClass);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x970ec7f5, 0xc880, 0x454c, 0xab, 0x1d, 0xd5, 0x70, 0x63, 0x15, 0xc5, 0x30);
		
		/// <summary>
		/// DomainRole Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassHasAttributes/Attribute.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassHasAttributes/Attribute.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ClassHasAttributes/Attribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("970ec7f5-c880-454c-ab1d-d5706315c530")]
		public virtual ModelAttribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a ModelClass
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelAttribute> GetAttributes(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelAttribute>, ModelAttribute>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasAttributes links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes> GetLinksToAttributes ( global::Sawczyn.EFDesigner.EFModel.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes>(modelClassInstance, global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.ModelClassDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the ClassHasAttributes link to a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes GetLinkToModelClass (global::Sawczyn.EFDesigner.EFModel.ModelAttribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes>(attributeInstance, global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasAttributes instance accessors
		
		/// <summary>
		/// Get any ClassHasAttributes links between a given ModelClass and a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelClass source, global::Sawczyn.EFDesigner.EFModel.ModelAttribute target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes>(source, global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.ModelClassDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasAttributes link between a given ModelClassand a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes GetLink( global::Sawczyn.EFDesigner.EFModel.ModelClass source, global::Sawczyn.EFDesigner.EFModel.ModelAttribute target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes>(source, global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.ModelClassDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasComments.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasComments.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f531650c-f0d4-47a2-be7c-c3a564194629")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf531650c, 0xf0d4, 0x47a2, 0xbe, 0x7c, 0xc3, 0xa5, 0x64, 0x19, 0x46, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xab8f00b5, 0xd976, 0x4ffa, 0xb9, 0xda, 0xbe, 0x28, 0x5a, 0xcb, 0xbe, 0x91);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasComments/ModelRoot.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelRootHasComments/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ab8f00b5-d976-4ffa-b9da-be285acbbe91")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModelRoot);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xe13a639c, 0xa993, 0x4cf5, 0x9c, 0x8d, 0xac, 0xa5, 0x2b, 0x7a, 0xea, 0xb6);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasComments/Comment.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasComments/Comment.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelRootHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e13a639c-a993-4cf5-9c8d-aca52b7aeab6")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments> GetLinksToComments ( global::Sawczyn.EFDesigner.EFModel.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments>(modelRootInstance, global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments GetLinkToModelRoot (global::Sawczyn.EFDesigner.EFModel.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments>(commentInstance, global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelRoot source, global::Sawczyn.EFDesigner.EFModel.Comment target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments>(source, global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments GetLink( global::Sawczyn.EFDesigner.EFModel.ModelRoot source, global::Sawczyn.EFDesigner.EFModel.Comment target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments>(source, global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship Generalization
	/// Inheritance between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Generalization.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Generalization.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c6eff342-0a73-4d2f-aa0e-b2811663fb60")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc6eff342, 0x0a73, 0x4d2f, 0xaa, 0x0e, 0xb2, 0x81, 0x16, 0x63, 0xfb, 0x60);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Generalization(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubclassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0x6df2e060, 0xabe4, 0x4aae, 0xa9, 0xe7, 0xae, 0x6f, 0xb3, 0x8c, 0xa1, 0xc3);
		
		/// <summary>
		/// DomainRole Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Generalization/Superclass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Generalization/Superclass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.Generalization/Superclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6df2e060-abe4-4aae-a9e7-ae6fb38ca1c3")]
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Superclass of a ModelClass
		/// <summary>
		/// Gets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetSuperclass(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperclass(ModelClass element, ModelClass newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclass domain role code
		
		/// <summary>
		/// Subclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassDomainRoleId = new global::System.Guid(0xd805f6db, 0xaa0c, 0x42e0, 0xb4, 0x1d, 0xa4, 0xff, 0x89, 0x8c, 0x64, 0x04);
		
		/// <summary>
		/// DomainRole Subclass
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Generalization/Subclass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Generalization/Subclass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Superclass", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.Generalization/Subclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d805f6db-aa0c-42e0-b41d-a4ff898c6404")]
		public virtual ModelClass Subclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a ModelClass
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetSubclasses(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Generalization links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.Generalization> GetLinksToSubclasses ( global::Sawczyn.EFDesigner.EFModel.ModelClass superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.Generalization>(superclassInstance, global::Sawczyn.EFDesigner.EFModel.Generalization.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclass link accessor
		/// <summary>
		/// Get the Generalization link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.Generalization GetLinkToSuperclass (global::Sawczyn.EFDesigner.EFModel.ModelClass subclassInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.Generalization>(subclassInstance, global::Sawczyn.EFDesigner.EFModel.Generalization.SubclassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.Generalization> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelClass source, global::Sawczyn.EFDesigner.EFModel.ModelClass target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.Generalization> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.Generalization>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.Generalization>(source, global::Sawczyn.EFDesigner.EFModel.Generalization.SuperclassDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given ModelClassand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.Generalization GetLink( global::Sawczyn.EFDesigner.EFModel.ModelClass source, global::Sawczyn.EFDesigner.EFModel.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.Generalization>(source, global::Sawczyn.EFDesigner.EFModel.Generalization.SuperclassDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship BidirectionalAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("73a40ac4-1b7a-4b4a-8099-3783fabcca5b")]
	public partial class BidirectionalAssociation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BidirectionalAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x73a40ac4, 0x1b7a, 0x4b4a, 0x80, 0x99, 0x37, 0x83, 0xfa, 0xbc, 0xca, 0x5b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BidirectionalAssociation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public BidirectionalAssociation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BidirectionalAssociation.BidirectionalSourceDomainRoleId, source), new DslModeling::RoleAssignment(BidirectionalAssociation.BidirectionalTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BidirectionalAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BidirectionalAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BidirectionalAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BidirectionalAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BidirectionalSource domain role code
		
		/// <summary>
		/// BidirectionalSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalSourceDomainRoleId = new global::System.Guid(0xa775052d, 0xa6a9, 0x4916, 0x8c, 0x4a, 0x1b, 0xd7, 0x72, 0x4b, 0x6e, 0x8b);
		
		/// <summary>
		/// DomainRole BidirectionalSource
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalSource.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalSource.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BidirectionalTargets", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalSource.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a775052d-a6a9-4916-8c4a-1bd7724b6e8b")]
		public virtual ModelClass BidirectionalSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BidirectionalSources of a ModelClass
		/// <summary>
		/// Gets a list of BidirectionalSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetBidirectionalSources(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalSource = value;
			}
		}
		
		#endregion
		#region BidirectionalTarget domain role code
		
		/// <summary>
		/// BidirectionalTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalTargetDomainRoleId = new global::System.Guid(0x59ead621, 0xa9cd, 0x4372, 0xb4, 0x8f, 0x27, 0x72, 0x53, 0x0d, 0x09, 0xe4);
		
		/// <summary>
		/// DomainRole BidirectionalTarget
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalTarget.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalTarget.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BidirectionalSources", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalTarget.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("59ead621-a9cd-4372-b48f-2772530d09e4")]
		public virtual ModelClass BidirectionalTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BidirectionalTargets of a ModelClass
		/// <summary>
		/// Gets a list of BidirectionalTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetBidirectionalTargets(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalTarget = value;
			}
		}
		
		#endregion
		#region SourcePropertyName domain property code
		
		/// <summary>
		/// SourcePropertyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourcePropertyNameDomainPropertyId = new global::System.Guid(0x1e0e43de, 0x1ed5, 0x42e9, 0x9c, 0x81, 0x8f, 0xee, 0x8d, 0x85, 0xb4, 0xcf);
		
		/// <summary>
		/// Storage for SourcePropertyName
		/// </summary>
		private global::System.String sourcePropertyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourcePropertyName domain property.
		/// Name of the entity property that returns the value at this end
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourcePropertyName.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourcePropertyName.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourcePropertyName.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("1e0e43de-1ed5-42e9-9c81-8fee8d85b4cf")]
		public global::System.String SourcePropertyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourcePropertyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourcePropertyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BidirectionalAssociation.SourcePropertyName domain property.
		/// </summary>
		internal sealed partial class SourcePropertyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<BidirectionalAssociation, global::System.String>
		{
			private SourcePropertyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BidirectionalAssociation.SourcePropertyName domain property value handler.
			/// </summary>
			public static readonly SourcePropertyNamePropertyHandler Instance = new SourcePropertyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BidirectionalAssociation.SourcePropertyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourcePropertyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BidirectionalAssociation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourcePropertyNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BidirectionalAssociation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourcePropertyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceDescription domain property code
		
		/// <summary>
		/// SourceDescription domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceDescriptionDomainPropertyId = new global::System.Guid(0x378e5c5a, 0x9eb0, 0x4d42, 0xad, 0x4c, 0x7f, 0xec, 0xa0, 0x17, 0x69, 0x95);
		
		/// <summary>
		/// Storage for SourceDescription
		/// </summary>
		private global::System.String sourceDescriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceDescription domain property.
		/// Detailed code documentation for this end of the association
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceDescription.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceDescription.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceDescription.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("378e5c5a-9eb0-4d42-ad4c-7feca0176995")]
		public global::System.String SourceDescription
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceDescriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceDescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BidirectionalAssociation.SourceDescription domain property.
		/// </summary>
		internal sealed partial class SourceDescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<BidirectionalAssociation, global::System.String>
		{
			private SourceDescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BidirectionalAssociation.SourceDescription domain property value handler.
			/// </summary>
			public static readonly SourceDescriptionPropertyHandler Instance = new SourceDescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BidirectionalAssociation.SourceDescription domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceDescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BidirectionalAssociation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceDescriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BidirectionalAssociation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceDescriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceSummary domain property code
		
		/// <summary>
		/// SourceSummary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceSummaryDomainPropertyId = new global::System.Guid(0x73bbc365, 0x57ca, 0x4f07, 0xa8, 0x34, 0x9f, 0xe6, 0x60, 0x5b, 0x76, 0xd0);
		
		/// <summary>
		/// Storage for SourceSummary
		/// </summary>
		private global::System.String sourceSummaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceSummary domain property.
		/// Short code documentation for this end of the association
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceSummary.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceSummary.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceSummary.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("73bbc365-57ca-4f07-a834-9fe6605b76d0")]
		public global::System.String SourceSummary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceSummaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceSummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BidirectionalAssociation.SourceSummary domain property.
		/// </summary>
		internal sealed partial class SourceSummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<BidirectionalAssociation, global::System.String>
		{
			private SourceSummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BidirectionalAssociation.SourceSummary domain property value handler.
			/// </summary>
			public static readonly SourceSummaryPropertyHandler Instance = new SourceSummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BidirectionalAssociation.SourceSummary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceSummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BidirectionalAssociation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceSummaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BidirectionalAssociation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceSummaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceCustomAttributes domain property code
		
		/// <summary>
		/// SourceCustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceCustomAttributesDomainPropertyId = new global::System.Guid(0x124bb49e, 0xc952, 0x4a7f, 0x80, 0x1a, 0xa7, 0xaf, 0x0a, 0x98, 0x5f, 0xc4);
		
		/// <summary>
		/// Storage for SourceCustomAttributes
		/// </summary>
		private global::System.String sourceCustomAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceCustomAttributes domain property.
		/// Any custom attributes to be generated for the source property. Will be passed
		/// through as entered.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceCustomAttributes.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceCustomAttributes.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceCustomAttributes.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("124bb49e-c952-4a7f-801a-a7af0a985fc4")]
		public global::System.String SourceCustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceCustomAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceCustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BidirectionalAssociation.SourceCustomAttributes domain property.
		/// </summary>
		internal sealed partial class SourceCustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<BidirectionalAssociation, global::System.String>
		{
			private SourceCustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BidirectionalAssociation.SourceCustomAttributes domain property value handler.
			/// </summary>
			public static readonly SourceCustomAttributesPropertyHandler Instance = new SourceCustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BidirectionalAssociation.SourceCustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceCustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BidirectionalAssociation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceCustomAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BidirectionalAssociation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceCustomAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceDisplayText domain property code
		
		/// <summary>
		/// SourceDisplayText domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceDisplayTextDomainPropertyId = new global::System.Guid(0x5069324e, 0x4190, 0x403e, 0x87, 0x91, 0x41, 0x6c, 0x69, 0x2c, 0x87, 0x2a);
		
		/// <summary>
		/// Storage for SourceDisplayText
		/// </summary>
		private global::System.String sourceDisplayTextPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceDisplayText domain property.
		/// Text for [Display(Name="<text>")] attribute on this end's property
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceDisplayText.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceDisplayText.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceDisplayText.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5069324e-4190-403e-8791-416c692c872a")]
		public global::System.String SourceDisplayText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceDisplayTextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceDisplayTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BidirectionalAssociation.SourceDisplayText domain property.
		/// </summary>
		internal sealed partial class SourceDisplayTextPropertyHandler : DslModeling::DomainPropertyValueHandler<BidirectionalAssociation, global::System.String>
		{
			private SourceDisplayTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BidirectionalAssociation.SourceDisplayText domain property value handler.
			/// </summary>
			public static readonly SourceDisplayTextPropertyHandler Instance = new SourceDisplayTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BidirectionalAssociation.SourceDisplayText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceDisplayTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BidirectionalAssociation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceDisplayTextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BidirectionalAssociation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceDisplayTextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BidirectionalSource link accessor
		/// <summary>
		/// Get the list of BidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation> GetLinksToBidirectionalTargets ( global::Sawczyn.EFDesigner.EFModel.ModelClass bidirectionalSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation>(bidirectionalSourceInstance, global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region BidirectionalTarget link accessor
		/// <summary>
		/// Get the list of BidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation> GetLinksToBidirectionalSources ( global::Sawczyn.EFDesigner.EFModel.ModelClass bidirectionalTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation>(bidirectionalTargetInstance, global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region BidirectionalAssociation instance accessors
		
		/// <summary>
		/// Get any BidirectionalAssociation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelClass source, global::Sawczyn.EFDesigner.EFModel.ModelClass target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation>(source, global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation link in links )
			{
				if ( target.Equals(link.BidirectionalTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship ModelRootHasEnums
	/// No description available
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7937b5d4-2003-470b-9140-051f2dcd8dd0")]
	public partial class ModelRootHasEnums : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasEnums domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7937b5d4, 0x2003, 0x470b, 0x91, 0x40, 0x05, 0x1f, 0x2d, 0xcd, 0x8d, 0xd0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasEnums link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelEnum to use as the target of the relationship.</param>
		public ModelRootHasEnums(ModelRoot source, ModelEnum target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasEnums.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasEnums.ModelEnumDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasEnums(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasEnums(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasEnums(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasEnums(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xa613cf7f, 0x477b, 0x4842, 0xb1, 0xc2, 0x95, 0x86, 0x97, 0x74, 0x63, 0xf8);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// No description available
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelRoot.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelRoot.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Enums", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a613cf7f-477b-4842-b1c2-9586977463f8")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelEnum
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelEnum element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelEnumDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelEnum element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelEnumDomainRoleId, newModelRoot);
		}
		#endregion
		#region ModelEnum domain role code
		
		/// <summary>
		/// ModelEnum domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelEnumDomainRoleId = new global::System.Guid(0x3e74772a, 0x5e00, 0x4977, 0x81, 0xe5, 0xbc, 0xfc, 0x90, 0xa8, 0xb8, 0xd9);
		
		/// <summary>
		/// DomainRole ModelEnum
		/// No description available
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelEnum.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelEnum.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelEnum.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3e74772a-5e00-4977-81e5-bcfc90a8b8d9")]
		public virtual ModelEnum ModelEnum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelEnum)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelEnumDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelEnumDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Enums of a ModelRoot
		/// <summary>
		/// Gets a list of Enums.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelEnum> GetEnums(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelEnum>, ModelEnum>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasEnums links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums> GetLinksToEnums ( global::Sawczyn.EFDesigner.EFModel.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums>(modelRootInstance, global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelRootDomainRoleId);
		}
		#endregion
		#region ModelEnum link accessor
		/// <summary>
		/// Get the ModelRootHasEnums link to a ModelEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums GetLinkToModelRoot (global::Sawczyn.EFDesigner.EFModel.ModelEnum modelEnumInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums>(modelEnumInstance, global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelEnumDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelEnum not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasEnums instance accessors
		
		/// <summary>
		/// Get any ModelRootHasEnums links between a given ModelRoot and a ModelEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelRoot source, global::Sawczyn.EFDesigner.EFModel.ModelEnum target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums>(source, global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelRootDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums link in links )
			{
				if ( target.Equals(link.ModelEnum) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasEnums link between a given ModelRootand a ModelEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums GetLink( global::Sawczyn.EFDesigner.EFModel.ModelRoot source, global::Sawczyn.EFDesigner.EFModel.ModelEnum target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums>(source, global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelRootDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums link in links )
			{
				if ( target.Equals(link.ModelEnum) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship ModelEnumHasValues
	/// No description available
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("168660d9-3989-40a9-b6ef-25d54c6e6d34")]
	public partial class ModelEnumHasValues : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelEnumHasValues domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x168660d9, 0x3989, 0x40a9, 0xb6, 0xef, 0x25, 0xd5, 0x4c, 0x6e, 0x6d, 0x34);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelEnumHasValues link in the same Partition as the given ModelEnum
		/// </summary>
		/// <param name="source">ModelEnum to use as the source of the relationship.</param>
		/// <param name="target">ModelEnumValue to use as the target of the relationship.</param>
		public ModelEnumHasValues(ModelEnum source, ModelEnumValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelEnumHasValues.EnumDomainRoleId, source), new DslModeling::RoleAssignment(ModelEnumHasValues.ValueDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelEnumHasValues(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelEnumHasValues(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelEnumHasValues(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelEnumHasValues(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Enum domain role code
		
		/// <summary>
		/// Enum domain role Id.
		/// </summary>
		public static readonly global::System.Guid EnumDomainRoleId = new global::System.Guid(0x0e073c3b, 0xea79, 0x41d0, 0xb8, 0x20, 0xb9, 0x72, 0x05, 0x2c, 0xfb, 0x86);
		
		/// <summary>
		/// DomainRole Enum
		/// No description available
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Enum.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Enum.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Values", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Enum.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0e073c3b-ea79-41d0-b820-b972052cfb86")]
		public virtual ModelEnum Enum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelEnum)DslModeling::DomainRoleInfo.GetRolePlayer(this, EnumDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EnumDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Enum of a ModelEnumValue
		/// <summary>
		/// Gets Enum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelEnum GetEnum(ModelEnumValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueDomainRoleId) as ModelEnum;
		}
		
		/// <summary>
		/// Sets Enum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEnum(ModelEnumValue element, ModelEnum newEnum)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueDomainRoleId, newEnum);
		}
		#endregion
		#region Value domain role code
		
		/// <summary>
		/// Value domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainRoleId = new global::System.Guid(0xa9be9f1b, 0x6dc5, 0x4dae, 0xb3, 0x45, 0xa4, 0x7b, 0x3d, 0xb1, 0x9d, 0x2b);
		
		/// <summary>
		/// DomainRole Value
		/// No description available
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Value.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Value.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Enum", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Value.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a9be9f1b-6dc5-4dae-b345-a47b3db19d2b")]
		public virtual ModelEnumValue Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelEnumValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Values of a ModelEnum
		/// <summary>
		/// Gets a list of Values.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelEnumValue> GetValues(ModelEnum element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelEnumValue>, ModelEnumValue>(element, EnumDomainRoleId);
		}
		#endregion
		#region Enum link accessor
		/// <summary>
		/// Get the list of ModelEnumHasValues links to a ModelEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues> GetLinksToValues ( global::Sawczyn.EFDesigner.EFModel.ModelEnum enumInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues>(enumInstance, global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.EnumDomainRoleId);
		}
		#endregion
		#region Value link accessor
		/// <summary>
		/// Get the ModelEnumHasValues link to a ModelEnumValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues GetLinkToEnum (global::Sawczyn.EFDesigner.EFModel.ModelEnumValue valueInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues>(valueInstance, global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.ValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Value not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelEnumHasValues instance accessors
		
		/// <summary>
		/// Get any ModelEnumHasValues links between a given ModelEnum and a ModelEnumValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelEnum source, global::Sawczyn.EFDesigner.EFModel.ModelEnumValue target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues>(source, global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.EnumDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues link in links )
			{
				if ( target.Equals(link.Value) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelEnumHasValues link between a given ModelEnumand a ModelEnumValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues GetLink( global::Sawczyn.EFDesigner.EFModel.ModelEnum source, global::Sawczyn.EFDesigner.EFModel.ModelEnumValue target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues>(source, global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.EnumDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues link in links )
			{
				if ( target.Equals(link.Value) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship ModelRootHasClasses
	/// Description for Sawczyn.EFDesigner.EFModel.ModelRootHasClasses
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("08ff1339-a992-4ffe-b350-6ba2eab5d7a4")]
	public partial class ModelRootHasClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x08ff1339, 0xa992, 0x4ffe, 0xb3, 0x50, 0x6b, 0xa2, 0xea, 0xb5, 0xd7, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasClasses link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public ModelRootHasClasses(ModelRoot source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasClasses.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasClasses.ModelClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x435f6b0f, 0xd7e3, 0x43c3, 0x8b, 0x08, 0x0f, 0x2a, 0x95, 0xdd, 0xd7, 0x55);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasClasses/ModelRoot.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasClasses/ModelRoot.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Classes", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelRootHasClasses/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("435f6b0f-d7e3-43c3-8b08-0f2a95ddd755")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelClass
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelClassDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelClass element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelClassDomainRoleId, newModelRoot);
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x82403bdb, 0x397b, 0x48d8, 0x98, 0x9d, 0xa7, 0x48, 0x27, 0xdc, 0xb2, 0x72);
		
		/// <summary>
		/// DomainRole ModelClass
		/// Description for Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasClasses/ModelClass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasClasses/ModelClass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelRootHasClasses/ModelClass.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("82403bdb-397b-48d8-989d-a74827dcb272")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classes of a ModelRoot
		/// <summary>
		/// Gets a list of Classes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetClasses(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasClasses links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses> GetLinksToClasses ( global::Sawczyn.EFDesigner.EFModel.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses>(modelRootInstance, global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelRootDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the ModelRootHasClasses link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses GetLinkToModelRoot (global::Sawczyn.EFDesigner.EFModel.ModelClass modelClassInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses>(modelClassInstance, global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasClasses instance accessors
		
		/// <summary>
		/// Get any ModelRootHasClasses links between a given ModelRoot and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelRoot source, global::Sawczyn.EFDesigner.EFModel.ModelClass target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses>(source, global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelRootDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses link in links )
			{
				if ( target.Equals(link.ModelClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasClasses link between a given ModelRootand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses GetLink( global::Sawczyn.EFDesigner.EFModel.ModelRoot source, global::Sawczyn.EFDesigner.EFModel.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses>(source, global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelRootDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses link in links )
			{
				if ( target.Equals(link.ModelClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c1a798b4-85dc-4479-9c35-30f5b15d8aa1")]
	public abstract partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc1a798b4, 0x85dc, 0x4479, 0x9c, 0x35, 0x30, 0xf5, 0xb1, 0x5d, 0x8a, 0xa1);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x8624f267, 0x1304, 0x43ef, 0xac, 0xc4, 0xf0, 0xb7, 0xd6, 0x7b, 0x28, 0x56);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/Comment.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/Comment.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8624f267-1304-43ef-acc4-f0b7d67b2856")]
		public abstract Comment Comment
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Comments of a DesignElement
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<Comment> GetComments(DesignElement element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<Comment>, Comment>(element, DesignElementDomainRoleId);
		}
		#endregion
		#region DesignElement domain role code
		
		/// <summary>
		/// DesignElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid DesignElementDomainRoleId = new global::System.Guid(0xf2d70cc8, 0x21b0, 0x455b, 0x98, 0x41, 0xbe, 0xe1, 0x7b, 0x5a, 0xd5, 0xd9);
		
		/// <summary>
		/// DomainRole DesignElement
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.DesignElement
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/DesignElement.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/DesignElement.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/DesignElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f2d70cc8-21b0-455b-9841-bee17b5ad5d9")]
		public abstract DesignElement DesignElement
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<DesignElement> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<DesignElement>, DesignElement>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects> GetLinksToSubjects ( global::Sawczyn.EFDesigner.EFModel.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects>(commentInstance, global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region DesignElement link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a DesignElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects> GetLinksToComments ( global::Sawczyn.EFDesigner.EFModel.DesignElement designElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects>(designElementInstance, global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.DesignElementDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a DesignElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects> GetLinks( global::Sawczyn.EFDesigner.EFModel.Comment source, global::Sawczyn.EFDesigner.EFModel.DesignElement target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects>(source, global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.DesignElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a DesignElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects GetLink( global::Sawczyn.EFDesigner.EFModel.Comment source, global::Sawczyn.EFDesigner.EFModel.DesignElement target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects>(source, global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.DesignElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship CommentReferencesClasses
	/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesClasses
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cedffe97-5a26-4774-89bf-ea0bda108db2")]
	public partial class CommentReferencesClasses : CommentReferencesSubjects
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcedffe97, 0x5a26, 0x4774, 0x89, 0xbf, 0xea, 0x0b, 0xda, 0x10, 0x8d, 0xb2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesClasses link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public CommentReferencesClasses(Comment source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesClasses.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesClasses.ModelClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly new global::System.Guid CommentDomainRoleId = new global::System.Guid(0xebcf4701, 0xc44e, 0x4ec9, 0x8a, 0x34, 0x0f, 0x84, 0x28, 0xca, 0xc3, 0x52);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentReferencesClasses/Comment.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentReferencesClasses/Comment.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Classes", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.CommentReferencesClasses/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ebcf4701-c44e-4ec9-8a34-0f8428cac352")]
		public override Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelClass
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x2495fc6d, 0x7420, 0x46b0, 0x85, 0x65, 0x21, 0xe3, 0x81, 0x82, 0x8d, 0x40);
		
		/// <summary>
		/// DomainRole ModelClass
		/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentReferencesClasses/ModelClass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentReferencesClasses/ModelClass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.CommentReferencesClasses/ModelClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2495fc6d-7420-46b0-8565-21e381828d40")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classes of a Comment
		/// <summary>
		/// Gets a list of Classes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetClasses(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, CommentDomainRoleId);
		}
		#endregion
		#region DesignElement domain role override
		
		/// <summary>
		/// Gets the element playing ModelClass domain role.
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.DesignElement
		/// </summary>
		public override DesignElement DesignElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ModelClass = (ModelClass)value;
			}
		}
		
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesClasses links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses> GetLinksToClasses ( global::Sawczyn.EFDesigner.EFModel.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses>(commentInstance, global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.CommentDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of CommentReferencesClasses links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses> GetLinksToComments ( global::Sawczyn.EFDesigner.EFModel.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses>(modelClassInstance, global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.ModelClassDomainRoleId);
		}
		#endregion
		#region CommentReferencesClasses instance accessors
		
		/// <summary>
		/// Get any CommentReferencesClasses links between a given Comment and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses> GetLinks( global::Sawczyn.EFDesigner.EFModel.Comment source, global::Sawczyn.EFDesigner.EFModel.ModelClass target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses>(source, global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.CommentDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses link in links )
			{
				if ( target.Equals(link.ModelClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesClasses link between a given Commentand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses GetLink( global::Sawczyn.EFDesigner.EFModel.Comment source, global::Sawczyn.EFDesigner.EFModel.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses>(source, global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.CommentDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses link in links )
			{
				if ( target.Equals(link.ModelClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship CommentReferencesEnums
	/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesEnums
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c2ca35b4-7dc5-4a7d-9a6f-cfd1cc9aedac")]
	public partial class CommentReferencesEnums : CommentReferencesSubjects
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesEnums domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc2ca35b4, 0x7dc5, 0x4a7d, 0x9a, 0x6f, 0xcf, 0xd1, 0xcc, 0x9a, 0xed, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesEnums link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelEnum to use as the target of the relationship.</param>
		public CommentReferencesEnums(Comment source, ModelEnum target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesEnums.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesEnums.ModelEnumDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesEnums(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesEnums(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesEnums(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesEnums(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly new global::System.Guid CommentDomainRoleId = new global::System.Guid(0xed267b9d, 0xcbe7, 0x4888, 0x9a, 0x95, 0xe7, 0x51, 0x91, 0x35, 0xc7, 0x6b);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentReferencesEnums/Comment.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentReferencesEnums/Comment.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Enums", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.CommentReferencesEnums/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ed267b9d-cbe7-4888-9a95-e7519135c76b")]
		public override Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelEnum
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelEnum element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelEnumDomainRoleId);
		}
		#endregion
		#region ModelEnum domain role code
		
		/// <summary>
		/// ModelEnum domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelEnumDomainRoleId = new global::System.Guid(0xd5ba04cb, 0xa560, 0x4293, 0xbd, 0xee, 0xb4, 0x5b, 0x62, 0x74, 0x28, 0x64);
		
		/// <summary>
		/// DomainRole ModelEnum
		/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.ModelEnum
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentReferencesEnums/ModelEnum.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentReferencesEnums/ModelEnum.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.CommentReferencesEnums/ModelEnum.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d5ba04cb-a560-4293-bdee-b45b62742864")]
		public virtual ModelEnum ModelEnum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelEnum)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelEnumDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelEnumDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Enums of a Comment
		/// <summary>
		/// Gets a list of Enums.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelEnum> GetEnums(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelEnum>, ModelEnum>(element, CommentDomainRoleId);
		}
		#endregion
		#region DesignElement domain role override
		
		/// <summary>
		/// Gets the element playing ModelEnum domain role.
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.DesignElement
		/// </summary>
		public override DesignElement DesignElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ModelEnum;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ModelEnum = (ModelEnum)value;
			}
		}
		
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesEnums links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums> GetLinksToEnums ( global::Sawczyn.EFDesigner.EFModel.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums>(commentInstance, global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.CommentDomainRoleId);
		}
		#endregion
		#region ModelEnum link accessor
		/// <summary>
		/// Get the list of CommentReferencesEnums links to a ModelEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums> GetLinksToComments ( global::Sawczyn.EFDesigner.EFModel.ModelEnum modelEnumInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums>(modelEnumInstance, global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.ModelEnumDomainRoleId);
		}
		#endregion
		#region CommentReferencesEnums instance accessors
		
		/// <summary>
		/// Get any CommentReferencesEnums links between a given Comment and a ModelEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums> GetLinks( global::Sawczyn.EFDesigner.EFModel.Comment source, global::Sawczyn.EFDesigner.EFModel.ModelEnum target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums>(source, global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.CommentDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums link in links )
			{
				if ( target.Equals(link.ModelEnum) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesEnums link between a given Commentand a ModelEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums GetLink( global::Sawczyn.EFDesigner.EFModel.Comment source, global::Sawczyn.EFDesigner.EFModel.ModelEnum target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums>(source, global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.CommentDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums link in links )
			{
				if ( target.Equals(link.ModelEnum) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship ModelRootHasProcedures
	/// Description for Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1a721467-9b93-4b40-9f37-eb7dddb64056")]
	public partial class ModelRootHasProcedures : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasProcedures domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1a721467, 0x9b93, 0x4b40, 0x9f, 0x37, 0xeb, 0x7d, 0xdd, 0xb6, 0x40, 0x56);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasProcedures link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelProcedure to use as the target of the relationship.</param>
		public ModelRootHasProcedures(ModelRoot source, ModelProcedure target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasProcedures.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasProcedures.ModelProcedureDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasProcedures(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasProcedures(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasProcedures(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasProcedures(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xa9dbf4fa, 0x2e22, 0x41ed, 0xa7, 0x5e, 0x92, 0xfb, 0xc7, 0xe6, 0x8f, 0xef);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures/ModelRoot.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures/ModelRoot.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelProcedures", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a9dbf4fa-2e22-41ed-a75e-92fbc7e68fef")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelProcedure
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelProcedure element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelProcedureDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelProcedure element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelProcedureDomainRoleId, newModelRoot);
		}
		#endregion
		#region ModelProcedure domain role code
		
		/// <summary>
		/// ModelProcedure domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelProcedureDomainRoleId = new global::System.Guid(0x0b88ce46, 0x629b, 0x4955, 0x90, 0x4e, 0xb3, 0xc6, 0xca, 0xff, 0xbe, 0xa8);
		
		/// <summary>
		/// DomainRole ModelProcedure
		/// Description for Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures.ModelProcedure
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures/ModelProcedure.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures/ModelProcedure.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures/ModelProcedure.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0b88ce46-629b-4955-904e-b3c6caffbea8")]
		public virtual ModelProcedure ModelProcedure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelProcedure)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelProcedureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelProcedureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelProcedures of a ModelRoot
		/// <summary>
		/// Gets a list of ModelProcedures.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelProcedure> GetModelProcedures(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelProcedure>, ModelProcedure>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasProcedures links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures> GetLinksToModelProcedures ( global::Sawczyn.EFDesigner.EFModel.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures>(modelRootInstance, global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures.ModelRootDomainRoleId);
		}
		#endregion
		#region ModelProcedure link accessor
		/// <summary>
		/// Get the ModelRootHasProcedures link to a ModelProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures GetLinkToModelRoot (global::Sawczyn.EFDesigner.EFModel.ModelProcedure modelProcedureInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures>(modelProcedureInstance, global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures.ModelProcedureDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelProcedure not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasProcedures instance accessors
		
		/// <summary>
		/// Get any ModelRootHasProcedures links between a given ModelRoot and a ModelProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelRoot source, global::Sawczyn.EFDesigner.EFModel.ModelProcedure target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures>(source, global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures.ModelRootDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures link in links )
			{
				if ( target.Equals(link.ModelProcedure) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasProcedures link between a given ModelRootand a ModelProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures GetLink( global::Sawczyn.EFDesigner.EFModel.ModelRoot source, global::Sawczyn.EFDesigner.EFModel.ModelProcedure target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures>(source, global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures.ModelRootDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ModelRootHasProcedures link in links )
			{
				if ( target.Equals(link.ModelProcedure) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainRelationship ProcedureHasParameters
	/// Description for Sawczyn.EFDesigner.EFModel.ProcedureHasParameters
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ProcedureHasParameters.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ProcedureHasParameters.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("117dfceb-f700-4733-920a-479a8058fca5")]
	public partial class ProcedureHasParameters : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProcedureHasParameters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x117dfceb, 0xf700, 0x4733, 0x92, 0x0a, 0x47, 0x9a, 0x80, 0x58, 0xfc, 0xa5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProcedureHasParameters link in the same Partition as the given ModelProcedure
		/// </summary>
		/// <param name="source">ModelProcedure to use as the source of the relationship.</param>
		/// <param name="target">ModelParameter to use as the target of the relationship.</param>
		public ProcedureHasParameters(ModelProcedure source, ModelParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProcedureHasParameters.ModelProcedureDomainRoleId, source), new DslModeling::RoleAssignment(ProcedureHasParameters.ParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProcedureHasParameters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProcedureHasParameters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProcedureHasParameters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProcedureHasParameters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelProcedure domain role code
		
		/// <summary>
		/// ModelProcedure domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelProcedureDomainRoleId = new global::System.Guid(0xd5d1020b, 0xf5d6, 0x4395, 0xa5, 0x3c, 0x1a, 0xd9, 0xc9, 0x80, 0x88, 0x53);
		
		/// <summary>
		/// DomainRole ModelProcedure
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ProcedureHasParameters/ModelProcedure.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ProcedureHasParameters/ModelProcedure.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Parameters", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ProcedureHasParameters/ModelProcedure.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d5d1020b-f5d6-4395-a53c-1ad9c9808853")]
		public virtual ModelProcedure ModelProcedure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelProcedure)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelProcedureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelProcedureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelProcedure of a ModelParameter
		/// <summary>
		/// Gets ModelProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelProcedure GetModelProcedure(ModelParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterDomainRoleId) as ModelProcedure;
		}
		
		/// <summary>
		/// Sets ModelProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelProcedure(ModelParameter element, ModelProcedure newModelProcedure)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterDomainRoleId, newModelProcedure);
		}
		#endregion
		#region Parameter domain role code
		
		/// <summary>
		/// Parameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterDomainRoleId = new global::System.Guid(0x1d79cbb1, 0x97aa, 0x490a, 0xbe, 0x65, 0xc1, 0x5d, 0x78, 0x20, 0xe8, 0x74);
		
		/// <summary>
		/// DomainRole Parameter
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ProcedureHasParameters/Parameter.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ProcedureHasParameters/Parameter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelProcedure", PropertyDisplayNameKey="Sawczyn.EFDesigner.EFModel.ProcedureHasParameters/Parameter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1d79cbb1-97aa-490a-be65-c15d7820e874")]
		public virtual ModelParameter Parameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parameters of a ModelProcedure
		/// <summary>
		/// Gets a list of Parameters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelParameter> GetParameters(ModelProcedure element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelParameter>, ModelParameter>(element, ModelProcedureDomainRoleId);
		}
		#endregion
		#region ModelProcedure link accessor
		/// <summary>
		/// Get the list of ProcedureHasParameters links to a ModelProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters> GetLinksToParameters ( global::Sawczyn.EFDesigner.EFModel.ModelProcedure modelProcedureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters>(modelProcedureInstance, global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters.ModelProcedureDomainRoleId);
		}
		#endregion
		#region Parameter link accessor
		/// <summary>
		/// Get the ProcedureHasParameters link to a ModelParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters GetLinkToModelProcedure (global::Sawczyn.EFDesigner.EFModel.ModelParameter parameterInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters>(parameterInstance, global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters.ParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Parameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProcedureHasParameters instance accessors
		
		/// <summary>
		/// Get any ProcedureHasParameters links between a given ModelProcedure and a ModelParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters> GetLinks( global::Sawczyn.EFDesigner.EFModel.ModelProcedure source, global::Sawczyn.EFDesigner.EFModel.ModelParameter target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters>();
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters>(source, global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters.ModelProcedureDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProcedureHasParameters link between a given ModelProcedureand a ModelParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters GetLink( global::Sawczyn.EFDesigner.EFModel.ModelProcedure source, global::Sawczyn.EFDesigner.EFModel.ModelParameter target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters>(source, global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters.ModelProcedureDomainRoleId);
			foreach ( global::Sawczyn.EFDesigner.EFModel.ProcedureHasParameters link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
